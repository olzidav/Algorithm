def min_search_cost(keys, frequencies):
    n = len(keys)
    dp = [[0] * n for _ in range(n)]

    for gap in range(2, n + 1):
        for i in range(1, n - gap + 1):
            j = i + gap - 1
            dp[i][j] = float('inf')
            for k in range(i, j + 1):
                cost = dp[i][k - 1] + dp[k + 1][j]
                for p in range(i, j + 1):
                    cost += abs(keys[p] - keys[k]) * frequencies[p]
                dp[i][j] = min(dp[i][j], cost)

    return dp[1][n - 1]

# Example usage:
keys = [5, 6]
frequencies = [17, 25]
result = min_search_cost(keys, frequencies)
print(result)  # Output: 59
