import java.util.*;

class Solution {
    public int minCostConnectPoints(int[][] points) {
        int n = points.length;
        if (n <= 1) return 0;

        // Min-heap to store the cost and the current point
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        boolean[] visited = new boolean[n];
        int totalCost = 0;
        int numEdges = 0;

        // Start with the first point
        minHeap.add(new int[]{0, 0});  // {cost, pointIndex}

        while (!minHeap.isEmpty()) {
            int[] current = minHeap.poll();
            int cost = current[0];
            int point = current[1];

            if (visited[point]) continue;
            visited[point] = true;
            totalCost += cost;
            numEdges++;

            // If we've added all points, stop
            if (numEdges == n) break;

            // Add all unvisited points to the heap
            for (int i = 0; i < n; i++) {
                if (!visited[i]) {
                    int manhattanCost = Math.abs(points[point][0] - points[i][0]) + Math.abs(points[point][1] - points[i][1]);
                    minHeap.add(new int[]{manhattanCost, i});
                }
            }
        }

        return totalCost;
    }
}
