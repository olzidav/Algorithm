from collections import deque

class Solution(object):
    def openLock(self, deadends, target):
        """
        :type deadends: List[str]
        :type target: str
        :rtype: int
        """
        dead_set = set(deadends)
        if "0000" in dead_set:  
            return -1
        
    
        queue = deque(["0000"])
        visited = set(["0000"])
        turns = 0
        
       
        while queue:
            for _ in range(len(queue)):
                current = queue.popleft()
                if current == target:
                    return turns
                
                
                for next_state in self.get_next_states(current):
                    if next_state not in dead_set and next_state not in visited:
                        visited.add(next_state)
                        queue.append(next_state)
            turns += 1
        
        return -1
    
    def get_next_states(self, state):
        next_states = []
        for i in range(4):
            current_digit = int(state[i])
            
           
            next_state_up = state[:i] + str((current_digit + 1) % 10) + state[i + 1:]
            next_states.append(next_state_up)
            
          
            next_state_down = state[:i] + str((current_digit - 1) % 10) + state[i + 1:]
            next_states.append(next_state_down)
        
        return next_states


solution = Solution()

deadends1 = ["0201", "0101", "0102", "1212", "2002"]
print(solution.openLock(deadends1, "0202"))  

deadends2 = ["8888"]
print(solution.openLock(deadends2, "0009"))  

deadends3 = ["8887", "8889", "8878", "8898", "8788", "8988", "7888", "9888"]
print(solution.openLock(deadends3, "8888"))  
