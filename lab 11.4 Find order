from collections import deque

class Solution:
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
       
        adj_list = [[] for _ in range(numCourses)]
        indegree = [0] * numCourses
        
       
        for course, prereq in prerequisites:
            adj_list[prereq].append(course)
            indegree[course] += 1
        
       
        queue = deque([i for i in range(numCourses) if indegree[i] == 0])
        result = []
        
      
        while queue:
            course = queue.popleft()
            result.append(course)
            
           
            for neighbor in adj_list[course]:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    queue.append(neighbor)
        
       
        return result if len(result) == numCourses else []


solution = Solution()


numCourses1 = 2
prerequisites1 = [[1, 0]]
print(solution.findOrder(numCourses1, prerequisites1))  


numCourses2 = 4
prerequisites2 = [[1, 0], [2, 0], [3, 1], [3, 2]]
print(solution.findOrder(numCourses2, prerequisites2))  

numCourses3 = 1
prerequisites3 = []
print(solution.findOrder(numCourses3, prerequisites3))  
